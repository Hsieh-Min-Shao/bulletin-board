<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
         http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/tx      http://www.springframework.org/schema/tx/spring-tx.xsd
         http://www.springframework.org/schema/jee     http://www.springframework.org/schema/jee/spring-jee.xsd">

<!--    &lt;!&ndash; Hikari DataSource（H2 記憶體 DB） &ndash;&gt;-->
<!--    <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">-->
<!--        <property name="driverClassName" value="org.h2.Driver"/>-->
<!--        <property name="jdbcUrl" value="jdbc:h2:mem:bb;MODE=MySQL;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false"/>-->
<!--        <property name="username" value="sa"/>-->
<!--        <property name="password" value=""/>-->
<!--    </bean>-->

    <!-- ✅ 用 JNDI 取用容器裡的 DataSource，不再在 App 端保存帳密 -->
    <jee:jndi-lookup id="dataSource"
                     jndi-name="java:comp/env/jdbc/BulletinDS"
                     expected-type="javax.sql.DataSource"/>

    <!-- Hibernate SessionFactory -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="packagesToScan" value="com.example.bulletin.entity"/>
        <property name="hibernateProperties">
            <props>
<!--                <prop key="hibernate.dialect">org.hibernate.dialect.H2Dialect</prop>-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQL8Dialect</prop>

<!--                <prop key="hibernate.hbm2ddl.auto">update</prop>-->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
            </props>
        </property>
    </bean>

    <!-- 交易管理 + 啟用 @Transactional -->
    <bean id="txManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <tx:annotation-driven transaction-manager="txManager"/>

    <!-- 掃描 Service（讓 @Service 生效） -->
    <!--    <context:component-scan base-package="com.example.bulletin.service"/>-->


    <!-- WEB-INF/root-context.xml -->
    <context:component-scan base-package="com.example.bulletin">
        <!-- 排除控制器，避免跟 MVC 子容器重複 -->
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!-- 開啟 placeholder 解析（傳統 Spring 必須） -->
    <context:property-placeholder/>

<!--    &lt;!&ndash; 有預設值的路徑；優先讀 JVM -DUPLOAD_PATH，再來 OS 環境變數 &ndash;&gt;-->
<!--    <bean id="uploadRoot" class="java.lang.String">-->
<!--        <constructor-arg value="${UPLOAD_PATH:/var/app/uploads}"/>-->
<!--    </bean>-->
</beans>
